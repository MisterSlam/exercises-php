---

name: Variables and Concatenation
theory: |

  To reinforce the previous topic, let's try using variables with concatenation. Syntaxically, nothing changes: we know how to concatenate (join) two strings:

  ```php
  <?php

  $what = "Kings" . "road";
  print_r($what); // => "Kingsroad"
  ```

  ... and therefore we can concatenate a string and a variable that contains a string:

  ```php
  <?php

  $first = "Kings";
  $what = $first . "road";

  print_r($what); // => "Kingsroad"
  ```

  ... and even concatenate two variables that contain strings:

  ```php
  <?php

  $first = "Kings";
  $last = 'road';

  $what = $first . $last;
  print_r($what); // => "Kingsroad"
  ```

instructions: |

  Websites constantly send emails to their users. A typical task is to automatically send a personalized email, where the username will be in the subject. If the user's name is stored somewhere in the website's database as a string, the task of generating the subject comes down to concatenation: for example, you need to join the string `Hello` with the string that contains the name.

  Write a program that will generate the subject and body of the email, using the provided variables, and display the resulting strings on the screen.

  For the subject, use the variables `$firstName` and `$greeting`, followed by a comma and an exclamation mark. Display this on the screen in the correct order.

  For the body of the email, use the variables `$info` and `$intro`, with the second sentence on a new line.

  The result on the screen should look like this:

  <pre class='hexlet-basics-output'>
  Hello, Joffrey!
  Here is important information about your account security.
  We couldn't verify your mother's maiden name.
  </pre>

  Complete the task using only two `print_r()`.

tips:
  - |
    Think about which string and in what order you need to concatenate the variables to get such a two-line output for the body of the email.
  - |
    Remember that you can create a string that contains only the control sequence `\n`.