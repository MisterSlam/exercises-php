---

name: Параметры функций
theory: |
  Функции могут не только возвращать значения, но и принимать их в виде параметров. С параметрами функций мы уже сталкивались:

  ```php
  <?php

  // Принимает на вход один параметр любого типа
  print_r('я параметр');
  // Принимает на вход два числовых параметра:
  // Первый — округляемое число
  // Второй — число знаков после запятой, которые нужно оставить
  round(10.1245, 3); // 10.125
  // Принимает на вход три строковых параметра:
  // Первый — что ищем
  // Второй — на что меняем
  // Третий — строка, в которой производим замену
  str_replace('go', 'mo', 'google'); // 'moogle'
  ```

  В этом уроке мы научимся создавать функции, которые принимают на вход параметры. Представим, что перед нами стоит задача – реализовать функцию `getLastChar()`. Она возвращает последний символ в строке, переданной на вход как параметр. Вот как будет выглядеть использование этой функции:

  ```php
  <?php

  // Передача параметров напрямую без переменных
  getLastChar('Hexlet'); // 't'
  // Передача параметров через переменные
  $name1 = 'Hexlet';
  getLastChar($name1); // 't'
  $name2 = 'Goo';
  getLastChar($name2); // 'o'
  ```

  Из описания и примеров кода мы можем сделать следующие выводы:

  * Нам нужно определить функцию `getLastChar()`
  * Функция должна принимать на вход один параметр строкового типа
  * Функция должна возвращать значение строкового типа

  Определение функции:

  ```php
  <?php

  function getLastChar($str)
  {
      // Вычисляем индекс последнего символа как длина строки - 1
      return $str[strlen($str) - 1];
  }
  ```

  Разберем его. В скобках указывается имя параметра (`$str`). Так как внутри функции мы не знаем, с каким конкретно значением идет работа, то параметры всегда описываются как переменные.

  Имя параметра может быть любым, оно не связано с тем, как вызывается функция. Главное, чтобы это имя отражало смысл значения, которое содержится внутри. Конкретное значение параметра будет зависеть от вызова этой функции.

  Этот параметр является обязательным. Если попробовать вызвать функцию без него, то интерпретатор выдаст ошибку:

  ```sh
  getLastChar(); // такой код не имеет смысла
  ArgumentCountError: Too few arguments to function getLastChar(), 0 passed
  ```

  Так же можно указывать два, три и более параметров. Они отделяются запятыми:

  ```php
  <?php

  // Функция по нахождению среднего числа
  function average($x, $y)
  {
      return ($x + $y) / 2;
  }
  average(1, 5); // 3
  average(1, 2); // 1.5
  ```

instructions: |
  Реализуйте функцию `truncate()`, которая обрезает переданную в функцию строку до указанного количества символов, добавляет в конце троеточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде. Функция принимает два параметра:

  1. Строка, которую нужно обрезать
  2. Число символов, которые нужно оставить

  ```php
  // Передаём текст напрямую
  // Обрезаем текст, оставляя 2 символа
  truncate('hexlet', 2)  // 'he...'

  // Через переменную
  $text = 'it works!'
  // Обрезаем текст, оставляя 4 символа
  $result = truncate($text, 4);
  print_r($result); // => 'it w...'
  ```

  Реализовать эту функцию можно различными способами, подскажем лишь один из них. Для решения этим способом вам понадобится взять подстроку из строки, переданной первым параметром в функцию `truncate()`. Используйте для этого функцию [substr()](https://www.php.net/manual/ru/function.substr.php). Подумайте, исходя из задания, с какого индекса и какой длины вам надо извлечь подстроку?

    ```php
    <?php
    $word = 'welcome';
    // Передавать параметры в функцию можно через переменные
    $length = 3;
    substr($word, 0, $length); // 'wel'
    ```

  С точки зрения проверочной системы не имеет значения, каким из способов будет реализована функция `truncate()` внутри, главное – чтобы она выполняла поставленную задачу
